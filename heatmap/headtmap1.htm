<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <style></style>
  </head>
  <body>
    <div id="my_dataviz"></div>

    <script>
      const maxValue = 30;

      var margin = { top: 0, right: 0, bottom: 0, left: 0 },
        width = 1000 - margin.left - margin.right,
        height = 1200 - margin.top - margin.bottom;

      var myGroups = [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
      ];
      var myVars = [
        "v1",
        "v2",
        "v3",
        "v4",
        "v5",
        "v6",
        "v7",
        "v8",
        "v9",
        "v10",
        "v11",
        "v12",
        "v13",
        "v14",
        "v15",
        "v16",
        "v17",
        "v18",
        "v19",
        "v20",
        "v21",
        "v22",
        "v23",
        "v24",
        "v25",
        "v26",
      ];

      var data = [];

      for (i = 0; i < myGroups.length; i++) {
        for (k = 0; k < myVars.length; k++) {
          data.push({
            x: myGroups[i],
            y: myVars[k],
            value: generatorRandomInt(),
          });
        }
      }
      console.log(data);

      var cellSize = 35;
      var svg = d3
        .select("#my_dataviz")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g");

      var x = d3
        .scaleBand()
        .range([0, cellSize * myGroups.length])
        .round(true)
        .domain(myGroups);
      svg
        .append("g")
        .attr(
          "transform",
          "translate(" + (cellSize + 10) + "," + (height - cellSize) + ")"
        )
        .call(d3.axisBottom(x));

      var y = d3
        .scaleBand()
        .range([cellSize * myVars.length, 0])
        .domain(myVars);
      svg
        .append("g")
        .attr(
          "transform",
          "translate(" +
            cellSize +
            "," +
            (height - 10 - (myVars.length + 1) * cellSize) +
            ")"
        )
        .call(d3.axisLeft(y));

      svg
        .append("g")
        .attr("fill", "none")
        .attr("stroke", "#000")
        .attr("stroke-width", "0.1px")
        .attr(
          "transform",
          "translate(" + (cellSize + 10) + "," + -(cellSize + 10) + ")"
        )
        .selectAll("rect")
        .data(data)
        .enter()
        .append("rect")
        .attr("width", cellSize)
        .attr("height", cellSize)
        .attr("class", function (d, i) {
          str = d.x + ":" + d.y + " I:" + i + " value:" + d.value;
          return str;
        })
        .attr("fill", function (d) {
          if (d.value > 25) {
            return "red";
          }

          if (d.value > 15) {
            return "purple";
          }

          if (d.value < 5) {
            return "white";
          }

          return "blue";
        })
        .attr("transform", function (d, i) {
          return (
            "translate(" +
            cellSize * myGroups.indexOf(d.x) +
            "," +
            (height - cellSize - cellSize * myVars.indexOf(d.y)) +
            ")"
          );
        });

      function generatorRandomInt() {
        return Math.floor(Math.random() * Math.floor(maxValue));
      }
    </script>
  </body>
</html>
